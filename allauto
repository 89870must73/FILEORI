#!/bin/bash

if [[ "$EUID" -ne 0 ]]; then
	echo ""
	echo "à¸à¸£à¸¸à¸“à¸²à¹€à¸‚à¹‰à¸²à¸ªà¸¹à¹ˆà¸£à¸°à¸šà¸šà¸œà¸¹à¹‰à¹ƒà¸Šà¹‰ root à¸à¹ˆà¸­à¸™à¸—à¸³à¸à¸²à¸£à¹ƒà¸Šà¹‰à¸‡à¸²à¸™à¸ªà¸„à¸£à¸´à¸›à¸—à¹Œ"
	echo "à¸„à¸³à¸ªà¸±à¹ˆà¸‡à¹€à¸‚à¹‰à¸²à¸ªà¸¹à¹ˆà¸£à¸°à¸šà¸šà¸œà¸¹à¹‰à¹ƒà¸Šà¹‰ root à¸„à¸·à¸­ sudo -i"
	echo ""
	exit
fi

if [[ ! -e /dev/net/tun ]]; then
	echo ""
	echo "TUN à¹„à¸¡à¹ˆà¸ªà¸²à¸¡à¸²à¸£à¸–à¹ƒà¸Šà¹‰à¸‡à¸²à¸™à¹„à¸”à¹‰"
	exit
fi


# Set Localtime GMT +7
ln -fs /usr/share/zoneinfo/Asia/Bangkok /etc/localtime

clear
# IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
# if [[ "$IP" = "" ]]; then
IP=$(wget -qO- icanhazip.com)
# fi

# Color
GRAY='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'
YELLOW='\033[33;1m'
RED='\033[31;1m'
BLUE='\033[34;1m'
MAGENTA='\033[35;1m'
CYAN='\033[36;1m'

if [[ -e /etc/debian_version ]]; then
	OS=debian
	VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
	GROUPNAME=nogroup
	RCLOCAL='/etc/rc.local'

	if [[ "$VERSION_ID" != 'VERSION_ID="10"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="11"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="9"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="14.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="16.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="18.04"' ]] && [[ "$VERSION_ID" != 'VERSION_ID="20.04"' ]]; then
echo ""
echo -e "${RED} ============ OS-32 & 64-bit =============="
echo -e "${RED} # OS DEBIAN 8-9-10  OS  UBUNTU 14-16-18  # "
echo -e "${RED} #             BY :SP VPN-TH              # "
echo -e "${RED} #            LINE : BANKISSS             # "
echo -e "${RED} ============ OS-32 & 64-bit ============== "
echo -e "${GREEN} à¹„à¸­à¸žà¸µà¹€à¸‹à¸´à¸Ÿ: $IP "
echo -e "${NC} "
		echo "à¹€à¸§à¸­à¸£à¹Œà¸Šà¸±à¹ˆà¸™ OS à¸‚à¸­à¸‡à¸„à¸¸à¸“à¹€à¸›à¹‡à¸™à¹€à¸§à¸­à¸£à¹Œà¸Šà¸±à¹ˆà¸™à¸—à¸µà¹ˆà¸¢à¸±à¸‡à¹„à¸¡à¹ˆà¸£à¸­à¸‡à¸£à¸±à¸š"
		echo "à¸ªà¸³à¸«à¸£à¸±à¸šà¹€à¸§à¸­à¸£à¹Œà¸Šà¸±à¹ˆà¸™à¸—à¸µà¹ˆà¸£à¸­à¸‡à¸£à¸±à¸šà¹„à¸”à¹‰ à¸ˆà¸°à¸¡à¸µà¸”à¸±à¸‡à¸™à¸µà¹‰..."
		echo ""
		echo "Ubuntu 14.04 - 16.04 - 18.04"
		echo "Debian 8 - 9 -10"
		echo ""
		exit
	fi
else
echo ""
echo -e "${RED} ============ OS-32 & 64-bit =============="
echo -e "${RED} # OS DEBIAN 8-9-10  OS  UBUNTU 14-16-18  # "
echo -e "${RED} #             BY :SP VPN-TH              # "
echo -e "${RED} #            LINE : BANKISSS             # "
echo -e "${RED} ============ OS-32 & 64-bit ============== "
echo -e "${GREEN} à¹„à¸­à¸žà¸µà¹€à¸‹à¸´à¸Ÿ: $IP "
echo -e "${NC} "
	echo "OS à¸—à¸µà¹ˆà¸„à¸¸à¸“à¹ƒà¸Šà¹‰à¹„à¸¡à¹ˆà¸ªà¸²à¸¡à¸²à¸£à¸–à¸£à¸­à¸‡à¸£à¸±à¸šà¹„à¸”à¹‰à¸à¸±à¸šà¸ªà¸„à¸£à¸´à¸›à¸—à¹Œà¸™à¸µà¹‰"
	echo "à¸ªà¸³à¸«à¸£à¸±à¸š OS à¸—à¸µà¹ˆà¸£à¸­à¸‡à¸£à¸±à¸šà¹„à¸”à¹‰ à¸ˆà¸°à¸¡à¸µà¸”à¸±à¸‡à¸™à¸µà¹‰..."
	echo ""
	echo "Ubuntu 14.04 - 16.04 - 18.04"
	echo "Debian 8 - 9 -10"
	echo ""
	exit
fi


# ads
echo ""
echo -e "${RED} ============ OS-32 & 64-bit =============="
echo -e "${RED} # OS DEBIAN 8-9-10  OS  UBUNTU 14-16-18  # "
echo -e "${RED} #             BY :SP VPN-TH              # "
echo -e "${RED} #            LINE : BANKISSS             # "
echo -e "${RED} ============ OS-32 & 64-bit ============== "
echo -e "${GREEN} à¹„à¸­à¸žà¸µà¹€à¸‹à¸´à¸Ÿ: $IP "
echo -e "${NC} "
# Install openvpn
cd
echo -e "\033[35;1m
----------------------------------------------
[âˆš] à¸£à¸°à¸šà¸šà¸ªà¸„à¸£à¸´à¸›  : SP VPN-TH 
[âˆš] à¸à¸£à¸¸à¸“à¸²à¸£à¸­à¸ªà¸±à¸à¸„à¸£à¸¹à¹ˆ .....
[âˆš] Loading .....
----------------------------------------------
${NC} "

newclient () {
	# Generates the custom client.ovpn
	cp /etc/openvpn/client-common.txt ~/$1.ovpn
	echo "<ca>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
	echo "</ca>" >> ~/$1.ovpn
	echo "<cert>" >> ~/$1.ovpn
	sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
	echo "</cert>" >> ~/$1.ovpn
	echo "<key>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
	echo "</key>" >> ~/$1.ovpn
	echo "<tls-auth>" >> ~/$1.ovpn
	sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/ta.key >> ~/$1.ovpn
	echo "</tls-auth>" >> ~/$1.ovpn
}
if [[ -e /etc/openvpn/server.conf ]]; then
			echo
			read -p "à¸„à¸¸à¸“à¸•à¹‰à¸­à¸‡à¸à¸²à¸£à¸¥à¸š OpenVPN à¸ˆà¸£à¸´à¸‡à¹†à¸«à¸£à¸·à¸­? [y/N]: " -e REMOVE
			if [[ "$REMOVE" = 'y' || "$REMOVE" = 'Y' ]]; then
				PORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d " " -f 2)
				PROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d " " -f 2)
				if pgrep firewalld; then
					IP=$(firewall-cmd --direct --get-rules ipv4 nat POSTROUTING | grep '\-s 10.8.0.0/24 '"'"'!'"'"' -d 10.8.0.0/24 -j SNAT --to ' | cut -d " " -f 10)
					# Using both permanent and not permanent rules to avoid a firewalld reload.
					firewall-cmd --zone=public --remove-port=$PORT/$PROTOCOL
					firewall-cmd --zone=trusted --remove-source=10.8.0.0/24
					firewall-cmd --permanent --zone=public --remove-port=$PORT/$PROTOCOL
					firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24
					firewall-cmd --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
					firewall-cmd --permanent --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
				else
					IP=$(grep 'iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to ' $RCLOCAL | cut -d " " -f 14)
					iptables -t nat -D POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
					sed -i '/iptables -t nat -A POSTROUTING -s 10.8.0.0\/24 ! -d 10.8.0.0\/24 -j SNAT --to /d' $RCLOCAL
					if iptables -L -n | grep -qE '^ACCEPT'; then
						iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
						iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT
						iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
						sed -i "/iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT/d" $RCLOCAL
						sed -i "/iptables -I FORWARD -s 10.8.0.0\/24 -j ACCEPT/d" $RCLOCAL
						sed -i "/iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT/d" $RCLOCAL
					fi
				fi
				if sestatus 2>/dev/null | grep "Current mode" | grep -q "enforcing" && [[ "$PORT" != '1194' ]]; then
					semanage port -d -t openvpn_port_t -p $PROTOCOL $PORT
				fi
				apt-get remove --purge -y nginx
				rm -rf /home/vps/public_html
				rm -rf /etc/openvpn
				rm -rf /usr/local/bin/*
				if [[ "$OS" = 'debian' ]]; then
					apt-get remove --purge -y openvpn
				else
					yum remove openvpn -y
				fi
				rm -rf /etc/openvpn
				rm -f /etc/sysctl.d/30-openvpn-forward.conf
				echo
				echo "OpenVPN removed!"
			else
				echo
				echo "Removal aborted!"
			fi
			exit

# elif [[ -e /etc/apt/sources.list.d/pritunl.list ]]; then
# echo ""
# echo "à¹„à¸¡à¹ˆà¸ªà¸²à¸¡à¸²à¸£à¸–à¸•à¸´à¸”à¸•à¸±à¹‰à¸‡ OpenVPN à¹„à¸”à¹‰"
# echo "à¹€à¸™à¸·à¹ˆà¸­à¸‡à¸ˆà¸²à¸ IP à¸™à¸µà¹‰à¹„à¸”à¹‰à¸•à¸´à¸”à¸•à¸±à¹‰à¸‡ OpenVPN à¸—à¸µà¹ˆà¸„à¸§à¸šà¸„à¸¸à¸¡à¸à¸²à¸£à¹ƒà¸Šà¹‰à¸‡à¸²à¸™à¸œà¹ˆà¸²à¸™ PRITUNL à¹„à¸›à¸à¹ˆà¸­à¸™à¸«à¸™à¹‰à¸²à¸™à¸µà¹‰à¹à¸¥à¹‰à¸§"
# exit

else
	clear
echo ""
echo -e "${RED} ============ OS-32 & 64-bit =============="
echo -e "${RED} # OS DEBIAN 8-9-10  OS  UBUNTU 14-16-18  # "
echo -e "${RED} #             BY :SP VPN-TH              # "
echo -e "${RED} #            LINE : BANKISSS             # "
echo -e "${RED} ============ OS-32 & 64-bit ============== "
echo -e "${GREEN} à¹„à¸­à¸žà¸µà¹€à¸‹à¸´à¸Ÿ: $IP "
echo -e "${NC} "
# Install openvpn
cd
echo -e "\033[35;1m
----------------------------------------------
[âˆš] à¸£à¸°à¸šà¸šà¸ªà¸„à¸£à¸´à¸›  :SP VPN-TH 
[âˆš] à¸à¸£à¸¸à¸“à¸²à¸£à¸­à¸ªà¸±à¸à¸„à¸£à¸¹à¹ˆ .....
[âˆš] Loading .....
----------------------------------------------
${NC} "
	read -p "IP Server : " -e -i $IP IP
	read -p "Port Server : " -e -i 443 PORT
	read -p "Port Proxy : " -e -i 8080 PROXY
	echo ""
	echo -e " |${GRAY}1${NC}| UDP"
	echo -e " |${GRAY}2${NC}| TCP"
	echo ""
	read -p "Protocol : " -e -i 2 PROTOCOL
	case $PROTOCOL in
		1) 
		PROTOCOL=udp
		;;
		2) 
		PROTOCOL=tcp
		;;
	esac
	echo ""
	echo -e " |${GRAY}1${NC}| DNS Current System"
	echo -e " |${GRAY}2${NC}| DNS Google"
	echo -e " |${GRAY}3${NC}| DNS OpenDNS Home"
	echo -e " |${GRAY}4${NC}| DNS TCPVPN.COM"
	echo -e " |${GRAY}5${NC}| DNS FreeDNS"
	echo ""
	read -p "DNS : " -e -i 2 DNS
	echo ""
	echo -e " |${GRAY}1${NC}| à¹„à¸Ÿà¸¥à¹Œà¹à¸šà¸šà¸à¸³à¸«à¸™à¸”à¹€à¸„à¸£à¸·à¹ˆà¸­à¸‡(à¸ªà¸£à¹‰à¸²à¸‡userà¹ƒà¸«à¸¡à¹ˆà¸•à¹‰à¸­à¸‡à¹à¸ˆà¸à¹„à¸Ÿà¸¥à¹Œà¹ƒà¸«à¸¡à¹ˆ)"
	echo -e " |${GRAY}2${NC}| à¹„à¸Ÿà¸¥à¹Œà¹à¸šà¸šà¸—à¸±à¹ˆà¸§à¹„à¸›à¸ªà¸£à¹‰à¸²à¸‡à¸£à¸«à¸±à¸ªà¹€à¸žà¸´à¹ˆà¸¡à¹„à¸”à¹‰"
	echo -e " |${GRAY}3${NC}| à¹„à¸Ÿà¸¥à¹Œà¹à¸šà¸šà¸žà¸´à¹€à¸¨à¸©à¹„à¸¡à¹ˆà¸•à¹‰à¸­à¸‡à¸—à¸³à¸Šà¸·à¹ˆà¸­à¸«à¸£à¸·à¸­à¸£à¸«à¸±à¸ª(à¸—à¸³à¹€à¸›à¹‡à¸™ RandomIP à¹„à¸”à¹‰)"
	echo ""
	read -p "Server System : " -e OPENVPNSYSTEM
	echo ""
	read -p "Server Name: " -e CLIENT
	echo ""
	case $OPENVPNSYSTEM in
		2)
		read -p "Your Username : " -e Usernames
		read -p "Your Password : " -e Passwords
		;;
	esac
	echo ""
	read -n1 -r -p "à¸à¸” Enter 1 à¸„à¸£à¸±à¹‰à¸‡à¹€à¸žà¸·à¹ˆà¸­à¹€à¸£à¸´à¹ˆà¸¡à¸—à¸³à¸à¸²à¸£à¸•à¸´à¸”à¸•à¸±à¹‰à¸‡ à¸«à¸£à¸·à¸­à¸à¸” CTRL+C à¹€à¸žà¸·à¹ˆà¸­à¸¢à¸à¹€à¸¥à¸´à¸"

	apt-get update
	apt-get install openvpn iptables openssl ca-certificates -y

	# Get easy-rsa
	EASYRSAURL='https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.5/EasyRSA-nix-3.0.5.tgz'
	wget -O ~/easyrsa.tgz "$EASYRSAURL" 2>/dev/null || curl -Lo ~/easyrsa.tgz "$EASYRSAURL"
	tar xzf ~/easyrsa.tgz -C ~/
	mv ~/EasyRSA-3.0.5/ /etc/openvpn/
	mv /etc/openvpn/EasyRSA-3.0.5/ /etc/openvpn/easy-rsa/
	chown -R root:root /etc/openvpn/easy-rsa/
	rm -f ~/easyrsa.tgz
	cd /etc/openvpn/easy-rsa/
	# Create the PKI, set up the CA and the server and client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	EASYRSA_CERT_EXPIRE=3650 ./easyrsa build-server-full server nopass
	EASYRSA_CERT_EXPIRE=3650 ./easyrsa build-client-full $CLIENT nopass
	EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn
	# CRL is read with each client connection, when OpenVPN is dropped to nobody
	chown nobody:$GROUPNAME /etc/openvpn/crl.pem
	# Generate key for tls-auth
	openvpn --genkey --secret /etc/openvpn/ta.key
	# Create the DH parameters file using the predefined ffdhe2048 group
	echo '-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
-----END DH PARAMETERS-----' > /etc/openvpn/dh.pem
	# Generate server.conf
	echo "port $PORT
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
auth SHA512
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
	echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
	# DNS
	case $DNS in
		1)
		# Locate the proper resolv.conf
		# Needed for systems running systemd-resolved
		if grep -q "127.0.0.53" "/etc/resolv.conf"; then
			RESOLVCONF='/run/systemd/resolve/resolv.conf'
		else
			RESOLVCONF='/etc/resolv.conf'
		fi
		# Obtain the resolvers from resolv.conf and use them for OpenVPN
		grep -v '#' $RESOLVCONF | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
			echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
		done
		;;
		2)
		echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
		3)
		echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		4)
		echo 'push "dhcp-option DNS 45.55.147.169"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 204.12.225.226"' >> /etc/openvpn/server.conf
		;;
		5)
		echo 'push "dhcp-option DNS 45.33.97.5"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 37.235.1.177"' >> /etc/openvpn/server.conf
		;;
	esac
	echo "keepalive 10 120
cipher AES-256-CBC
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem" >> /etc/openvpn/server.conf
	# Enable net.ipv4.ip_forward for the system 
	echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/30-openvpn-forward.conf
	# Enable without waiting for a reboot or service restart
	echo 1 > /proc/sys/net/ipv4/ip_forward
	if pgrep firewalld; then
		# Using both permanent and not permanent rules to avoid a firewalld
		# reload.
		# We don't use --add-service=openvpn because that would only work with
		# the default port and protocol.
		firewall-cmd --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --zone=trusted --add-source=10.8.0.0/24
		firewall-cmd --permanent --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
		# Set NAT for the VPN subnet
		firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
		firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
	else
		# Needed to use rc.local with some systemd distros
		if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
			echo '#!/bin/sh -e
exit 0' > $RCLOCAL
		fi
		chmod +x $RCLOCAL
		# Set NAT for the VPN subnet
		iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP
		sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
		if iptables -L -n | grep -qE '^(REJECT|DROP)'; then
			# If iptables has at least one REJECT rule, we asume this is needed.
			# Not the best approach but I can't think of other and this shouldn't
			# cause problems.
			iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
			iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
			iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
			sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT" $RCLOCAL
			sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
			sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
		fi
	fi
	# If SELinux is enabled and a custom port was selected, we need this
	if sestatus 2>/dev/null | grep "Current mode" | grep -q "enforcing" && [[ "$PORT" != '1194' ]]; then
		# Install semanage if not already present
		if ! hash semanage 2>/dev/null; then
			yum install policycoreutils-python -y
		fi
		semanage port -a -t openvpn_port_t -p $PROTOCOL $PORT
	fi
	# And finally, restart OpenVPN
	if [[ "$OS" = 'debian' ]]; then
		# Little hack to check for systemd
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
		else
			/etc/init.d/openvpn restart
		fi
	else
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
			systemctl enable openvpn@server.service
		else
			service openvpn restart
			chkconfig openvpn on
		fi
	fi
	# If the server is behind a NAT, use the correct IP address
	if [[ "$PUBLICIP" != "" ]]; then
		IP=$PUBLICIP
	fi
	# client-common.txt is created so we have a template to add further users later
	echo "client
dev tun
proto $PROTOCOL
sndbuf 0
rcvbuf 0
remote $IP $PORT
http-proxy $IP $PROXY
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-CBC
setenv opt block-outside-dns
key-direction 1
verb 3" > /etc/openvpn/client-common.txt

	case $OPENVPNSYSTEM in
		2)
		echo "auth-user-pass" >> /etc/openvpn/client-common.txt
		;;
	esac
	
echo ""
echo -e "\033[35;1m { install nginx }${NC} "
echo ""
 	cd
	apt-get -y install nginx
	cat > /etc/nginx/nginx.conf <<END
user www-data;
worker_processes 2;
pid /var/run/nginx.pid;
events {
	multi_accept on;
        worker_connections 1024;
}
http {
	autoindex on;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        client_max_body_size 32M;
	client_header_buffer_size 8m;
	large_client_header_buffers 8 8m;
	fastcgi_buffer_size 8m;
	fastcgi_buffers 8 8m;
	fastcgi_read_timeout 600;
        include /etc/nginx/conf.d/*.conf;
}
END
	mkdir -p /home/vps/public_html
        echo "<meta name='viewport' content='width=device-width, initial-scale=1'>"
        echo "<input class='button' type='button' value='TRUE NOPRO' onclick='myFunction();closeWin()'>" > /home/vps/public_html/index.html
	echo "" > /home/vps/public_html/info.php   
	args='$args'
	uri='$uri'
	document_root='$document_root'
	fastcgi_script_name='$fastcgi_script_name'
        cd /
	cat > /etc/nginx/conf.d/vps.conf <<END
server {
    listen       80;
    server_name  127.0.0.1 localhost;
    access_log /var/log/nginx/vps-access.log;
    error_log /var/log/nginx/vps-error.log error;
    root   /home/vps/public_html;
    location / {
        index  index.html index.htm index.php;
	try_files $uri $uri/ /index.php?$args;
    }
    location ~ \.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}
END

echo ""
echo -e "\033[0;32m { DOWNLOAD MENU SCRIPT }${NC} "
echo "" 
        
   
#	cd /usr/local/bin
# wget -q -O m "https://raw.githubusercontent.com/LiLGun-X/SCRIP-U.20/main/Menu"
# chmod +x /usr/local/bin/m
#	wget -O /usr/local/bin/Auto-Delete-Client "https://raw.githubusercontent.com/Bankzza555666/spvpn-th/main/Auto-Delete-Client"
#	chmod +x /usr/local/bin/Auto-Delete-Client 
	apt-get -y install vnstat
	cd /etc/openvpn/easy-rsa/
	./easyrsa build-client-full $CLIENT nopass
	newclient "$CLIENT"
	cp /root/$CLIENT.ovpn /home/vps/public_html/
	rm -f /root/$CLIENT.ovpn
	case $OPENVPNSYSTEM in
		2)
		useradd $Usernames
		echo -e "$Passwords\n$Passwords\n"|passwd $Usernames &> /dev/null
		;;
	esac
	
	clear
echo ""
echo ""
echo -e "${RED} ============ OS-32 & 64-bit =============="
echo -e "${RED} # OS DEBIAN 8-9-10  OS  UBUNTU 14-16-18  # "
echo -e "${RED} #             BY :SP VPN-TH              # "
echo -e "${RED} #            LINE : BANKISSS             # "
echo -e "${RED} ============ OS-32 & 64-bit ============== "
echo -e "${GREEN} à¹„à¸­à¸žà¸µà¹€à¸‹à¸´à¸Ÿ: $IP "
echo -e "${NC} "
	echo "OpenVPN, Squid Proxy, Nginx .....Install finish."
	echo "IP Server : $IP"
	echo "Port Server : $PORT"
	if [[ "$PROTOCOL" = 'udp' ]]; then
		echo "Protocal : UDP"
	elif [[ "$PROTOCOL" = 'tcp' ]]; then
		echo "Protocal : TCP"
	fi
	echo "Port Nginx : 80"
	echo "IP Proxy   : $IP"
	echo "Port Proxy : $PROXY"
	echo "port SSl"  :444
	echo ""
	case $OPENVPNSYSTEM in
		1)
		echo "Download My Config : http://$IP/$CLIENT.ovpn"
		;;
		2)
		echo "Download Config : http://$IP/$CLIENT.ovpn"
		echo ""
		echo "Your Username : $Usernames"
		echo "Your Password : $Passwords"
		echo "Expire : Never"
		;;
		3)
		echo "Download Config : http://$IP/$CLIENT.ovpn"
		;;
	esac
	echo ""
	echo "===================================================================="
	echo -e "à¸•à¸´à¸”à¸•à¸±à¹‰à¸‡à¸ªà¸³à¹€à¸£à¹‡à¸ˆ... à¸à¸£à¸¸à¸“à¸²à¸žà¸´à¸¡à¸žà¹Œà¸„à¸³à¸ªà¸±à¹ˆà¸‡${YELLOW} m ${NC} à¹€à¸žà¸·à¹ˆà¸­à¹„à¸›à¸¢à¸±à¸‡à¸‚à¸±à¹‰à¸™à¸•à¸­à¸™à¸–à¸±à¸”à¹„à¸›"
	echo "===================================================================="
	echo ""
	exit
