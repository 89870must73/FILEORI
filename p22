#!/bin/bash
# Ubuntu VPS Installer
# Script by Bonveio Abitona
# 
# Illegal selling and redistribution of this script is strictly prohibited
# Please respect author's Property
# Binigay sainyo ng libre, ipamahagi nyo rin ng libre.
#
#

#############################
#############################

#L2TP SCRIPT DEBIAN 9 10 & UBUNTU 16 17 18 19
###wget -q 'https://raw.githubusercontent.com/Barts-23/L2tp-ipsec/master/l2tp_debuntu.sh' && chmod +x l2tp_debuntu.sh && ./l2tp_debuntu.sh
###wget -q 'https://raw.githubusercontent.com/Barts-23/L2tp-ipsec/master/add_vpn_user.sh' && chmod +x add_vpn_user.sh && ./add_vpn_user.sh
###wget -q 'https://raw.githubusercontent.com/Barts-23/L2tp-ipsec/master/update_vpn_users.sh' && chmod +x update_vpn_users.sh && ./update_vpn_users.sh

# Variables (Can be changed depends on your preferred values)
# Script name
MyScriptName='OctopusVPN'

# OpenSSH Ports
SSH_Port1='22'
SSH_Port2='225'

# Your SSH Banner
SSH_Banner='https://raw.githubusercontent.com/matss404/jalaiza/master/banner'

# Dropbear Ports
Dropbear_Port1='900'
Dropbear_Port2='990'

# Stunnel Ports
Stunnel_Port1='440' # through Dropbear
Stunnel_Port2='441' # through OpenSSH
Stunnel_Port3='442' # through OpenVPN

# OpenVPN Ports
OpenVPN_Port1='1103'
OpenVPN_Port2='25222' # take note when you change this port, openvpn sun noload config will not work

# Privoxy Ports (must be 1024 or higher)
Privoxy_Port1='8118'
Privoxy_Port2='8080'

# Squid Ports (must be 1024 or higher)
Proxy_Port1='8000'
Proxy_Port2='8888'

# OpenVPN Config Download Port
OvpnDownload_Port='10' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Manila'
#############################


#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
 export DEBIAN_FRONTEND=noninteractive
 apt-get update
 apt-get upgrade -y
 
 # Removing some firewall tools that may affect other services
 #apt-get remove --purge ufw firewalld -y

 
 # Installing some important machine essentials
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid screenfetch -y

 # Installing all required packages to install Webmin
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq -y
 
 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 #rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" >/etc/apt/sources.list.d/openvpn.list && apt-key del E158C569 && wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
 wget -qO security-openvpn-net.asc "https://keys.openpgp.org/vks/v1/by-fingerprint/F554A3687412CFFEBDEFE0A312F5F7B42F2B01E7" && gpg --import security-openvpn-net.asc
 apt-get update -y
 apt-get install openvpn -y
}

function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 ###WebminFile='http://prdownloads.sourceforge.net/webadmin/webmin_1.910_all.deb'
 ###wget -qO webmin.deb "$WebminFile"
 
 # Installing .deb package for webmin
 ###dpkg --install webmin.deb
 
 ###rm -rf webmin.deb
 
 # Modified Webmin Installation
 sudo apt install software-properties-common apt-transport-https wget -y
 wget -q http://www.webmin.com/jcameron-key.asc -O- | sudo apt-key add -
 sudo add-apt-repository "deb [arch=amd64] http://download.webmin.com/download/repository sarge contrib"
 sudo apt install webmin -y
 
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:900

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:22

[openvpn]
accept = 587
connect = 127.0.0.1:1103
cert = /etc/stunnel/stunnel.pem
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|900|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|22|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf

 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf1' > /etc/openvpn/server_tcp.conf
#OctopusVPN

port MyOvpnPort1
proto tcp
dev tun
dev-type tun
sndbuf 100000
rcvbuf 100000
crl-verify crl.pem
ca ca.crt
cert server.crt
key server.key
tls-auth ta.key 0
dh dh.pem
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-tun
status openvpn-status.log
verb 2
mute 3
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
myOpenVPNconf1
cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
#OctopusVPN

port MyOvpnPort2
proto udp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "redirect-gateway def1 bypass-dhcp" 
crl-verify crl.pem
ca ca.crt
cert server.crt
key server.key
tls-auth tls-auth.key 0
dh dh.pem
auth SHA256
cipher AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
status openvpn.log
verb 3
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
myOpenVPNconf2
 cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIDQjCCAiqgAwIBAgIUVFciiqRsnC/L0LsbIIPQq+tEgZswDQYJKoZIhvcNAQEL
BQAwEzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjEwMzE1MTkwMDA3WhcNMzEwMzEz
MTkwMDA3WjATMREwDwYDVQQDDAhDaGFuZ2VNZTCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBANnjrTnNJVM9+jJZ8zrj8uJK+5z2sa2gaSqbh9nsB1q9JMqy
ph7zQTQONDPYZ2hLFXx/4XpXboJbt+1n28sCr5/6AiJeOvxQSB4eqs3GNDeAuXaX
NWvmLsTl9VdScgMRgLZkSS2cGaGqNF9+Rdnv2LONtzuoLY1XDov7Usx58in2kRd4
UPR7dxOlaag6ZkZrWK1RBbnAbSxNkvNvOZkUSDBdWpvsSLfljCS0/hUI05a/37cg
I23NwEpoQANDsLKoayax5jbEm2WvTu7tBH6Kg2jiMDsTktZ5+OChHGi75nW19OfH
TdnIDLnIhiWAVSJrp5aerfJbG0ywYjfHsnkOW3kCAwEAAaOBjTCBijAdBgNVHQ4E
FgQUkG8zRu/6lHadkyzKcuEbolkAXF8wTgYDVR0jBEcwRYAUkG8zRu/6lHadkyzK
cuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKKpGycL8vQuxsg
g9Cr60SBmzAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsF
AAOCAQEA0oHokuDzPeVB+8VxFKXXOnJdxVolCl+r5jKx6FSD5tg3UpTjgAEujt/E
jbT3sTGcBQhFfi953LEO+ENk5D4FrLmA74GxvmSMJSYMhn9DwbWSmd5UNwgSCC1W
PS3bmMjVotgLaWh/y7S2YCRgyMMTEyAbke3X+Og8VALhjS4/nHFkuvcQIkJR4wri
AYO5s63crLJd6CkrJtT1O8OdPEWIgwhHDv2x/et9Jackn2LUMBHS4LLOzBvRq24u
flx690UllC1lYs7phoph0v7yRzGdbxuvV5NAE5vUfR35IK/y/mX7cTDfChG/O78T
nUjydhVmGWjLoHn/wqk3u5nzi7Hk5Q==
-----END CERTIFICATE-----
EOF7
 cat <<'EOF9'> /etc/openvpn/client.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            81:33:7e:86:11:35:29:cc:2e:ce:77:41:18:87:bc:cf
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=ChangeMe
        Validity
            Not Before: Mar 15 19:00:08 2021 GMT
            Not After : Jun 18 19:00:08 2023 GMT
        Subject: CN=client
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:92:bd:0a:31:34:ce:98:eb:18:ab:27:f6:3e:2d:
                    28:bf:b0:9c:c8:ef:af:24:92:c3:61:39:df:35:c5:
                    29:0f:20:17:81:ce:53:ae:d3:89:8a:e4:56:78:7a:
                    f0:aa:a9:f3:73:86:e9:ed:fb:27:29:75:08:e6:35:
                    c6:e4:0d:35:20:8f:50:9f:bd:b8:a1:32:36:dd:b5:
                    7c:e3:9a:35:98:1e:d2:70:98:55:ba:3e:ec:bf:a5:
                    65:49:30:90:f4:0e:43:c2:c4:1a:42:86:91:62:33:
                    62:4b:87:c1:3b:76:d7:17:9e:8f:32:fc:c8:ba:a6:
                    8d:38:66:2e:0f:94:f0:7f:57:23:28:c0:b4:13:d5:
                    02:d5:39:cb:04:53:8e:59:2a:a3:b6:98:ea:b4:a2:
                    e3:e5:d0:48:9f:6e:f0:04:4f:11:f5:ff:6e:68:45:
                    8e:fd:bc:a3:11:fd:a3:cf:3e:c7:2e:1c:97:24:5f:
                    75:ae:b3:35:80:bd:a0:32:c2:36:2b:1b:ff:64:8e:
                    ba:f4:81:60:0d:0b:87:4e:b6:6e:a9:f1:f9:1b:11:
                    c7:54:cd:89:c9:d9:28:3d:b0:98:d8:5c:d4:cd:d6:
                    f1:f3:33:fb:7b:a4:a9:d4:8e:3d:ff:78:58:bc:33:
                    46:e9:76:e1:d3:ba:e8:a5:ea:5e:25:ef:91:23:5b:
                    4a:1b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                3C:F6:52:8F:96:1A:B2:00:EE:95:27:FF:89:0D:56:C8:29:6A:99:41
            X509v3 Authority Key Identifier: 
                keyid:90:6F:33:46:EF:FA:94:76:9D:93:2C:CA:72:E1:1B:A2:59:00:5C:5F
                DirName:/CN=ChangeMe
                serial:54:57:22:8A:A4:6C:9C:2F:CB:D0:BB:1B:20:83:D0:AB:EB:44:81:9B

            X509v3 Extended Key Usage: 
                TLS Web Client Authentication
            X509v3 Key Usage: 
                Digital Signature
    Signature Algorithm: sha256WithRSAEncryption
         14:28:d6:d1:c1:ab:79:72:b0:e6:8d:3e:53:d7:06:d7:5c:03:
         9e:39:66:97:bc:1f:0b:3f:56:27:83:63:cd:63:65:e0:07:b2:
         8e:bd:56:11:08:ce:d7:79:0b:00:fe:fa:98:4b:77:d2:f9:c8:
         f8:cf:10:88:45:1a:3a:9e:97:7e:8b:88:04:93:94:b6:67:df:
         15:a9:e9:7c:c2:98:47:cb:df:7e:0c:72:84:93:df:eb:a1:36:
         34:30:65:55:f0:ba:c5:17:9c:cb:c3:24:b9:8b:b8:8a:1a:38:
         55:05:b3:a5:c6:3f:67:c4:fc:df:b6:1f:9f:5f:09:b9:51:3f:
         fd:1d:d9:df:ba:b3:59:4e:a6:86:23:26:04:a1:93:94:ee:a8:
         0e:db:2b:3f:c2:28:4f:d0:62:e3:d5:81:cc:db:4a:cd:52:7e:
         49:ed:b2:67:81:ee:21:d7:95:e3:b5:36:8a:35:26:75:49:8c:
         bf:0f:b9:bd:04:91:87:e2:28:71:7e:91:c5:11:0c:26:38:7b:
         72:90:32:8a:e3:c5:e0:8b:e6:60:9c:83:a0:b2:ad:05:08:c8:
         a9:42:03:19:aa:92:dd:a1:98:56:0f:fd:f7:18:99:1d:8c:5a:
         ce:bf:22:00:9a:68:c0:bb:99:1d:ae:56:ea:63:44:d3:8d:bf:
         f9:4e:60:5a
-----BEGIN CERTIFICATE-----
MIIDTzCCAjegAwIBAgIRAIEzfoYRNSnMLs53QRiHvM8wDQYJKoZIhvcNAQELBQAw
EzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjEwMzE1MTkwMDA4WhcNMjMwNjE4MTkw
MDA4WjARMQ8wDQYDVQQDDAZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQCSvQoxNM6Y6xirJ/Y+LSi/sJzI768kksNhOd81xSkPIBeBzlOu04mK
5FZ4evCqqfNzhunt+ycpdQjmNcbkDTUgj1CfvbihMjbdtXzjmjWYHtJwmFW6Puy/
pWVJMJD0DkPCxBpChpFiM2JLh8E7dtcXno8y/Mi6po04Zi4PlPB/VyMowLQT1QLV
OcsEU45ZKqO2mOq0ouPl0EifbvAETxH1/25oRY79vKMR/aPPPscuHJckX3WuszWA
vaAywjYrG/9kjrr0gWANC4dOtm6p8fkbEcdUzYnJ2Sg9sJjYXNTN1vHzM/t7pKnU
jj3/eFi8M0bpduHTuuil6l4l75EjW0obAgMBAAGjgZ8wgZwwCQYDVR0TBAIwADAd
BgNVHQ4EFgQUPPZSj5YasgDulSf/iQ1WyClqmUEwTgYDVR0jBEcwRYAUkG8zRu/6
lHadkyzKcuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKKpGyc
L8vQuxsgg9Cr60SBmzATBgNVHSUEDDAKBggrBgEFBQcDAjALBgNVHQ8EBAMCB4Aw
DQYJKoZIhvcNAQELBQADggEBABQo1tHBq3lysOaNPlPXBtdcA545Zpe8Hws/VieD
Y81jZeAHso69VhEIztd5CwD++phLd9L5yPjPEIhFGjqel36LiASTlLZn3xWp6XzC
mEfL334McoST3+uhNjQwZVXwusUXnMvDJLmLuIoaOFUFs6XGP2fE/N+2H59fCblR
P/0d2d+6s1lOpoYjJgShk5TuqA7bKz/CKE/QYuPVgczbSs1SfkntsmeB7iHXleO1
Noo1JnVJjL8Pub0EkYfiKHF+kcURDCY4e3KQMorjxeCL5mCcg6CyrQUIyKlCAxmq
kt2hmFYP/fcYmR2MWs6/IgCaaMC7mR2uVupjRNONv/lOYFo=
-----END CERTIFICATE-----
EOF9
 cat <<'EOF10'> /etc/openvpn/client.key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCSvQoxNM6Y6xir
J/Y+LSi/sJzI768kksNhOd81xSkPIBeBzlOu04mK5FZ4evCqqfNzhunt+ycpdQjm
NcbkDTUgj1CfvbihMjbdtXzjmjWYHtJwmFW6Puy/pWVJMJD0DkPCxBpChpFiM2JL
h8E7dtcXno8y/Mi6po04Zi4PlPB/VyMowLQT1QLVOcsEU45ZKqO2mOq0ouPl0Eif
bvAETxH1/25oRY79vKMR/aPPPscuHJckX3WuszWAvaAywjYrG/9kjrr0gWANC4dO
tm6p8fkbEcdUzYnJ2Sg9sJjYXNTN1vHzM/t7pKnUjj3/eFi8M0bpduHTuuil6l4l
75EjW0obAgMBAAECggEABQSD0bTtj5sSZ9/g8rVWnF9srQ5NHeIK3ks9T7hjNAoz
45NrlyHSpTYzosEJc7yF/6BQZXveFfPTjxOtrmSpOWjNJ/kz1AdEiwZGs/208XO0
XHdJDypRrCf6s6r+een29TUBdN7nH8WECfMlb2Qb7MnWObcdIgzJ7XDJCG1eX+xM
nSV8juGWNYvarOkwOYCBwp5m3Cpom+FUbqPjpzRvEXY+ZXANwEiOXT+RueJCJ88/
nWYWWtvnFo+FApI90EuQs3Jjntm8Z1J0Ey2uRlnzCBK7JHLVON9b0oYsVH2bIC9i
0WlVBR3MXGQ3LSxnusxH7wmL6iPh3nOT4ZZLIliZgQKBgQDChbuVYw8DyM9KLsYG
6t/U5oPQrU+9rQl27+2OXXMXiTyUqF+Df+REneFu4SkSu2BgpR/49641mhCR8vN6
EyApDObtPxaqEpqYVfqHNIYLFLqJHYY3RM9e6StdDQYa1k80WtOuYHZ3yDu5VQEw
l+AagYWbx/ee9QM052KzJ8IY2wKBgQDBHT1ba9+TFNy2b+ZGH7q6Wbd9HpkWMih0
PrgQ/cgvNpQH0pTqqu7MmSE8avHx5hDtMtvnEtW2ZS27pa0bE17+UrusNePihfAl
RnEHU5Uf8VlGTltZ3UZ63UKJgyZVsVTn4pyRXgdNGZ84FY0Z1t9ev0b0hKV4t7S+
33yteWa3wQKBgDxPODR9zObweIxYah807QbWHWIyibmWD4wnoTB1erx+WSEB/vMH
UN+RT5aQCqr7G0t7hqkrKYEG7kJB4AkmKt9vV52Q5NcAA5xdc9o9h52h5J+kXrt+
Awk7I62q3wytC0uBKYYz9Cb5FsNEPqUxQVMWezUsT3KiJkddwfUny37nAoGAbNTT
rV//4d4R/ObXOZHMJBVHqUXDNJUT418tULYVSTZS+o2cyxuF9NwftPL4Y0ErLOJK
t9EPi/k9atEV23pxQJbTmVvNj+23xuoJ7P0Xv6a+jza9mMlxXPCw/Npikkyb8wrs
/aemKbdU2cCbgoJr4/OcQ1U2A/BT9nXwx7rxPoECgYEApNI+KVuz95Obh0/qnitl
7TqzRLYTOsN55SleonNaXU1qnbERAu1KzL86PwbCVxd0F+jkG6lyAuI+1Iv539C7
EhwwvddvRqzr249+UchQ+ijXaQ0EtmsDYDQBSRa4YZLdVO8F3h7+ieYbzNZyn5Vn
ASO6ZSFR3vy6kDVUEdwAC2g=
-----END PRIVATE KEY-----
EOF10
 cat <<'EOF18'> /etc/openvpn/tls-auth.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
bdcfd0846a6e313b81166314b6b3837c
b4860c3d84ac2f17fcf26a7ca090974c
97ec8395c67b98090560e82120b16eb0
d3f237fb7d5033985db907a3e3fce5ab
ee5bad86b77a36166f80b594aa3b53db
87863f3250e931d37a1b66703d7691b7
88c4e0e648fa278da3c883247daa3c38
379a26c262ed37a6ee1ec7ba826e703b
e9f4a494f89b253499e0b64f20250157
cb182c932bdd916de5aef07ff6e5a4ee
b3eb7aec6a058785ff771d2c18432790
195eae67a96f383be5931c1356734a6b
f4c619cb97094fd337f971b340bad41b
bb774d630c2eb24fd0057785d505afee
6a2749f79febf7bdb1e5a6c62f250c55
2f2448e5be01abb287151073d53f3996
-----END OpenVPN Static key V1-----
EOF18
 cat <<'EOF107'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            3c:7a:4b:8b:00:12:bd:f8:f7:0c:e0:24:97:9d:10:dd
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=ChangeMe
        Validity
            Not Before: Mar 15 19:00:08 2021 GMT
            Not After : Jun 18 19:00:08 2023 GMT
        Subject: CN=server
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:98:77:d1:23:00:51:bb:50:de:f0:35:8e:07:23:
                    06:08:56:df:89:83:dc:2d:ed:da:74:0e:4a:e9:47:
                    91:a1:02:d1:eb:74:a0:25:80:95:e6:ff:48:99:95:
                    bf:74:77:cb:a8:3c:eb:20:8a:62:8c:43:bc:53:df:
                    2a:9a:b7:fc:f3:6c:f0:44:38:0a:e7:33:41:b4:3f:
                    f6:ce:00:c0:ad:80:03:66:60:81:18:4b:27:be:f0:
                    c8:7e:56:c6:78:6a:d0:ee:97:c9:24:d6:5c:b5:25:
                    c2:06:ef:94:2e:11:24:cb:a1:58:bc:cb:ad:be:27:
                    aa:6c:2c:38:de:90:53:86:d6:da:7b:60:73:0a:89:
                    e5:2b:d7:a8:fe:3a:8b:a6:4e:5c:13:bd:90:01:42:
                    d4:ad:1c:e4:a4:c5:f8:f6:36:98:e5:2a:90:39:7d:
                    70:5c:a2:17:5c:c8:d4:7c:10:24:2c:38:a6:75:a7:
                    3d:02:15:d2:f1:27:7c:75:e3:33:ef:82:f4:aa:97:
                    4c:d4:cc:f2:85:96:80:dc:46:71:2e:74:a7:19:49:
                    23:3d:d3:77:3b:63:5a:29:d1:ad:bd:cf:17:43:d3:
                    ab:8f:9f:97:0b:1b:93:8b:54:02:88:3c:82:1e:88:
                    5c:25:df:ad:00:a9:45:22:d1:f7:81:e6:20:b2:5c:
                    d4:af
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                0D:0D:03:A4:DC:D7:7F:39:D3:EB:AB:DA:04:FD:EF:90:16:59:FC:CC
            X509v3 Authority Key Identifier: 
                keyid:90:6F:33:46:EF:FA:94:76:9D:93:2C:CA:72:E1:1B:A2:59:00:5C:5F
                DirName:/CN=ChangeMe
                serial:54:57:22:8A:A4:6C:9C:2F:CB:D0:BB:1B:20:83:D0:AB:EB:44:81:9B

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:server
    Signature Algorithm: sha256WithRSAEncryption
         44:c0:87:e6:07:f4:f9:0f:a4:60:2a:f6:67:0f:7f:6a:26:38:
         9e:26:61:1b:97:f0:1c:ef:87:a6:fc:05:a2:bd:4f:ed:fa:a9:
         13:a2:72:14:70:46:0e:38:33:eb:ae:07:f3:ae:e4:c3:68:28:
         aa:a1:aa:09:23:23:0c:0e:7b:20:2e:e1:ad:d7:c3:55:92:77:
         3c:af:ec:09:84:29:5d:a4:d5:98:e5:86:04:05:67:99:7c:ae:
         f4:6e:09:1a:ac:79:fd:ef:36:3f:c5:fb:d0:48:1d:76:ba:9c:
         a7:49:62:8a:c1:96:a6:fb:f9:0c:c6:18:d3:64:02:ac:ab:f0:
         66:27:96:96:77:2d:8f:1a:ea:8f:fe:98:00:7a:ac:7c:7d:4e:
         67:6b:51:9f:36:8f:0c:f4:9f:a0:9d:6e:59:53:ac:58:fe:be:
         db:67:cb:fb:8e:f3:d7:23:26:05:10:5c:3a:c3:b1:89:4a:8c:
         7e:80:9b:1f:5d:18:ac:b4:86:b8:89:9f:c8:6c:82:9f:bf:65:
         a2:21:77:ab:cb:a6:c8:cb:62:0d:ba:b4:ab:c6:62:b1:7f:26:
         d3:a1:a8:e8:ae:7e:3c:fb:35:f0:97:3c:d0:7a:ef:a6:9b:d9:
         59:9d:62:b1:11:b7:63:3f:05:58:52:b2:74:fb:df:3b:ee:d7:
         56:97:2f:1f
-----BEGIN CERTIFICATE-----
MIIDYTCCAkmgAwIBAgIQPHpLiwASvfj3DOAkl50Q3TANBgkqhkiG9w0BAQsFADAT
MREwDwYDVQQDDAhDaGFuZ2VNZTAeFw0yMTAzMTUxOTAwMDhaFw0yMzA2MTgxOTAw
MDhaMBExDzANBgNVBAMMBnNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBAJh30SMAUbtQ3vA1jgcjBghW34mD3C3t2nQOSulHkaEC0et0oCWAleb/
SJmVv3R3y6g86yCKYoxDvFPfKpq3/PNs8EQ4CuczQbQ/9s4AwK2AA2ZggRhLJ77w
yH5Wxnhq0O6XySTWXLUlwgbvlC4RJMuhWLzLrb4nqmwsON6QU4bW2ntgcwqJ5SvX
qP46i6ZOXBO9kAFC1K0c5KTF+PY2mOUqkDl9cFyiF1zI1HwQJCw4pnWnPQIV0vEn
fHXjM++C9KqXTNTM8oWWgNxGcS50pxlJIz3TdztjWinRrb3PF0PTq4+flwsbk4tU
Aog8gh6IXCXfrQCpRSLR94HmILJc1K8CAwEAAaOBsjCBrzAJBgNVHRMEAjAAMB0G
A1UdDgQWBBQNDQOk3Nd/OdPrq9oE/e+QFln8zDBOBgNVHSMERzBFgBSQbzNG7/qU
dp2TLMpy4RuiWQBcX6EXpBUwEzERMA8GA1UEAwwIQ2hhbmdlTWWCFFRXIoqkbJwv
y9C7GyCD0KvrRIGbMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAR
BgNVHREECjAIggZzZXJ2ZXIwDQYJKoZIhvcNAQELBQADggEBAETAh+YH9PkPpGAq
9mcPf2omOJ4mYRuX8Bzvh6b8BaK9T+36qROichRwRg44M+uuB/Ou5MNoKKqhqgkj
IwwOeyAu4a3Xw1WSdzyv7AmEKV2k1ZjlhgQFZ5l8rvRuCRqsef3vNj/F+9BIHXa6
nKdJYorBlqb7+QzGGNNkAqyr8GYnlpZ3LY8a6o/+mAB6rHx9TmdrUZ82jwz0n6Cd
bllTrFj+vttny/uO89cjJgUQXDrDsYlKjH6Amx9dGKy0hriJn8hsgp+/ZaIhd6vL
psjLYg26tKvGYrF/JtOhqOiufjz7NfCXPNB676ab2VmdYrERt2M/BVhSsnT73zvu
11aXLx8=
-----END CERTIFICATE-----
EOF107
 cat <<'EOF113'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCYd9EjAFG7UN7w
NY4HIwYIVt+Jg9wt7dp0DkrpR5GhAtHrdKAlgJXm/0iZlb90d8uoPOsgimKMQ7xT
3yqat/zzbPBEOArnM0G0P/bOAMCtgANmYIEYSye+8Mh+VsZ4atDul8kk1ly1JcIG
75QuESTLoVi8y62+J6psLDjekFOG1tp7YHMKieUr16j+OoumTlwTvZABQtStHOSk
xfj2NpjlKpA5fXBcohdcyNR8ECQsOKZ1pz0CFdLxJ3x14zPvgvSql0zUzPKFloDc
RnEudKcZSSM903c7Y1op0a29zxdD06uPn5cLG5OLVAKIPIIeiFwl360AqUUi0feB
5iCyXNSvAgMBAAECggEAI2IC9dV4IjlVU3eKO1vEZaELhVVFfp8pSC+c8OA8Cpql
7reFBs79ersZtRLMeJHogGWKx2V2E0kQ5oHu2DMEj9VjOOGsnhUGFXeWph4EmP8R
SuvwaZvfYG9uh+tJad6YGBa/hj39C8j0azmkMMCnwl3yQvYdnviDk1D77aKez7an
Csuk4Yxj1VhOVeNfe2Jy04wkbkyzhljAosf35AieIlYrbmJzFIc5gNQpbU0agrEF
QUyb83Y8fBNtxh7XWprRNzBT5CIrrnASxglmDAWtsQzlF6ApnCK6qm/SPohQwhay
aMDORrEezyRup63HQqbcfqlZbKFzfRdesdHInii9KQKBgQDKCv3GlvSEqstIXF8A
FWA6TNqHbJrXyKxjywhiMdzNqlMbt1J+TTv6MYUXBTPgUfNYCynnK/kv+ltqKPUm
k7jFXpRuH+QlK0adbn4UbQhzpClylnnpEP5ytc3JcUehlvzcG659LuEjI292wwuA
/zNr6Q6cuGZ7hTOf7e8dyWgFlQKBgQDBL42myuvAydQDE3IeiBgxILzB8hKFe/3K
5ymW5tB9xOTKQkZkFNjs6Q14Dr6kxojWdvs3+ZdCdcwOo4EKDUxzoqMX/toYD3az
IrVbgL3KjB+afm02GEbt7kaRuzmFoA5MK+WJbqCm+KDVbQRzY3dbkTuCM9h5SJoN
stO0/rbYMwKBgC4KLyYPxAxvNv94PRWxyUm/tZRihS5ixhW/cFuf7SbYhzOrpJqv
UtmCa0eBof6d7gvED3pkJNZwAGDCkIqH4vTmxoAJuF1X7TF2ujhBWEmxwNghvgoE
G1dcYlZi/+WsmFY34J0aD6eILaAsdfShMsCGTRQdWQ0Qn2D0QSbSfGe5AoGBAIhN
pQQp6Gz9+jixX7NrEqaXEpdE1QyZj1e6Af4WnMQgR8ztNf0nOGbviDFNNfXMnn+z
M00rLS4XLwKlGkadW3O7LJehmP+g6X863frRuxdOBn5a9XNVbbYyiFgKYWuGoo/b
6PgutesZQWFUqe9AHtbcgcA8FGB+eTNxGS57CUdBAoGBAJnOKqbN9QJ8hctAJM+3
0Gm9fa6IK2KU59kdy7tZ2Aa9cIutyMh20p6YtD0maatR9XxYSrxNdntTREXOd43y
0y0uox0lVE2i5yFeGFmH9QZt8i4Ym5a9m8yX0ayXYTYRdbdBO217WHeWmpjbCw08
J5S/8MJ7AQaeacBMt6evLPMG
-----END PRIVATE KEY-----
EOF113
 cat <<'EOF13'> /etc/openvpn/dh.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAspXWP1raVMg0U8rNBE+CIT43EgzhjejYJut4NHdIFyZxToXTMe68
+Zvpq6nTqK4NXpo3Nj8ghID9nhkjiwrIQYuRf1s4R225RBBdf3Pv6IRawaQSHnVE
IdC3JZf60H2WkFINNTJ6MQ58Pj0KSjStXWiRLzErJpVDC4dxCYETFHkKmH8miyzo
e9esKCiz9fOG5cTaQde+38lXcrL7lgZIFGIOfPp0ajHNo7lsmJLL6p9qk29C7KaW
+WOu0XHdOMazl8E/88f/kqMuhF2bTXLIxGN2A2TsXZeDORsA87Y7AK5Ij5ARHJV4
1z1JywraZZ5zJYTOxl242fI8bvC68+3YswIBAg==
-----END DH PARAMETERS-----
EOF13
 cat <<'EOF103'> /etc/openvpn/crl.pem
-----BEGIN X509 CRL-----
MIIBsDCBmQIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhDaGFuZ2VNZRcN
MjEwMzE1MTkwMDA4WhcNMjEwOTExMTkwMDA4WqBSMFAwTgYDVR0jBEcwRYAUkG8z
Ru/6lHadkyzKcuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKK
pGycL8vQuxsgg9Cr60SBmzANBgkqhkiG9w0BAQsFAAOCAQEAWyN2Q11kQlcFrEm4
GIrKEqSudIq4uL1HMatD28vVjgZtBTLbyySwmDUMKRpcWnKRAwJe+vbKw3HT3RYY
07oCqwBf3QpprIY3OmRj7UZBzXP9WAo+KFh0PdzELj4oWf54KU8fchRJIGZjffES
AlgFR1OOImML+tdDFamEdGjJy2RRuUvrGy2rUAHz/pQrGEqq6VJYDxwPwnuu2WH+
YDZJZuZeAEVxgKt3XWvZ5Bvdgg3TFn/UsEPANIDwY0UQcu3T57erT1XvBMWhcI5+
vepcxEPNkqQF61gfCCF13yT0zxFxUuTScJyRfncypDrhaDO5noklr+s5h8vcFocI
WorPOg==
-----END X509 CRL-----
EOF103
 cat <<'EOF122'> /etc/openvpn/ta.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
8dae585618bdb9284931f6e9a84010e1
4193423f573ad617245dde1b425cffa2
a577c2b26ae398b1b697a913e8c42914
78b493816af79ac0be194880a315a35b
d0131f71b6c1dddfc070a6f1b629bf99
fb7885eaad47166f6ff962f3aaad3b3c
ff7425e5cc4b99754b43cfe26812a00d
72706f716b90202ae512736983d94cbc
8331ba27b3681e9d60b0585bb43d99f1
1768b2d9ff3f915201c03225db7db251
8805de05750656ea26eb9dafc3dea651
c40480fefe0d5cf32c1a95ecf4a61c55
c60b28089fee6ffafa9bc5068d536e0e
e342ab33ee8c7061e3e7b23017e0674a
1ece34ae3b258f5902b7ddc606f1a76f
38322e3be857ad2ce5ad8bebb0df8358
-----END OpenVPN Static key V1-----
EOF122

 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
#done
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_udp.conf
#done

 # setting openvpn server port
 sed -i "s|MyOvpnPort1|$OpenVPN_Port1|g" /etc/openvpn/server_tcp.conf
 sed -i "s|MyOvpnPort2|$OpenVPN_Port2|g" /etc/openvpn/server_udp.conf
 
 # Generating openvpn dh.pem file using openssl
 #openssl dhparam -out /etc/openvpn/dh.pem 1024
 
 # Getting some OpenVPN plugins for unix authentication
 wget -qO /etc/openvpn/b.zip 'https://raw.githubusercontent.com/itsgelogomayee/dpndncy/master/openvpn_plugin64'
 unzip -qq /etc/openvpn/b.zip -d /etc/openvpn
 rm -f /etc/openvpn/b.zip
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf && sysctl --system &> /dev/null && echo 1 > /proc/sys/net/ipv4/ip_forward

 # Iptables Rule for OpenVPN server
 #PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
 #IPCIDR='10.200.0.0/16'
 #iptables -I FORWARD -s $IPCIDR -j ACCEPT
 #iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j MASQUERADE
 #iptables -t nat -A POSTROUTING -s $IPCIDR -o $PUBLIC_INET -j MASQUERADE
 
 # Installing Firewalld
 apt install firewalld -y
 systemctl start firewalld
 systemctl enable firewalld
 firewall-cmd --quiet --set-default-zone=public
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/tcp
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/udp
 firewall-cmd --quiet --reload
 firewall-cmd --quiet --add-masquerade
 firewall-cmd --quiet --permanent --add-masquerade
 firewall-cmd --quiet --permanent --add-service=ssh
 firewall-cmd --quiet --permanent --add-service=openvpn
 firewall-cmd --quiet --permanent --add-service=http
 firewall-cmd --quiet --permanent --add-service=https
 firewall-cmd --quiet --permanent --add-service=privoxy
 firewall-cmd --quiet --permanent --add-service=squid
 firewall-cmd --quiet --reload
 
 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_tcp
 systemctl enable openvpn@server_udp
 systemctl restart openvpn@server_tcp
 systemctl restart openvpn@server_udp
 
 # Pulling OpenVPN no internet fixer script
 #wget -qO /etc/openvpn/openvpn.bash "https://raw.githubusercontent.com/Bonveio/BonvScripts/master/openvpn.bash"
 #0chmod +x /etc/openvpn/openvpn.bash
}

function InsProxy(){
 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'myPrivoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
myPrivoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # I'm setting Some Squid workarounds to prevent Privoxy's overflowing file descriptors that causing 50X error when clients trying to connect to your proxy server(thanks for this trick @homer_simpsons)
 apt remove --purge squid -y
 rm -rf /etc/squid/sq*
 apt install squid -y
 
# Squid Ports (must be 1024 or higher)
cat <<mySquid > /etc/squid/squid.conf
acl VPN dst $(wget -4qO- http://ipinfo.io/ip)/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:$Proxy_Port1
http_port 0.0.0.0:$Proxy_Port2
coredump_dir /var/spool/squid
dns_nameservers 1.1.1.1 1.0.0.1
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname localhost
mySquid

 sed -i "s|SquidCacheHelper|$Privoxy_Port1|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "Restarting proxy server.."
 systemctl restart privoxy
 systemctl restart squid
}




function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/octopusvpn-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/octopusvpn-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 
cat <<EOF152> /var/www/openvpn/GTMConfig.ovpn
#Octopus VPN

client
dev tun
proto tcp
remote $IPADDR:$OpenVPN_Port1@devvault.digi.com.my
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port2
http-proxy-retry
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
comp-lzo
cipher AES-256-CBC
auth SHA256
push "redirect-gateway def1 bypass-dhcp"
verb 3
push-peer-info
ping 10
ping-restart 60
hand-window 70
server-poll-timeout 4
reneg-sec 2592000
sndbuf 100000
rcvbuf 100000
remote-cert-tls server
key-direction 1

<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF152

cat <<EOF16> /var/www/openvpn/UDPConfig.ovpn
#Octopus VPN

client
dev tun
proto udp
remote $IPADDR $OpenVPN_Port2
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name server_ADBtkp0yL46HLXPb name
auth SHA256
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
setenv opt block-outside-dns
verb 3
auth-user-pass
key-direction 1
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/tls-auth.key)
</tls-auth>
EOF16

cat <<EOF160> /var/www/openvpn/ssl.ovpn
#Octopus VPN

client
dev tun
proto tcp
remote 127.0.0.1 $OpenVPN_Port1
route $IPADDR 255.255.255.255 net_gateway 
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
comp-lzo
cipher AES-256-CBC
auth SHA256
push "redirect-gateway def1 bypass-dhcp"
verb 3
push-peer-info
ping 10
ping-restart 60
hand-window 70
server-poll-timeout 4
reneg-sec 2592000
sndbuf 100000
rcvbuf 100000
remote-cert-tls server
key-direction 1
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF160

cat <<EOF17> /var/www/openvpn/SunNoloadConfig.ovpn
#Octopus VPN

client
dev tun
proto tcp-client
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
bind
float
tun-mtu 1500
tun-mtu-extra 32
mssfix 1450
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
persist-tun
persist-key
auth-user-pass
auth none
auth-nocache
auth-retry interact
cipher none
keysize 0
comp-lzo
reneg-sec 0
verb 0
nice -20
log /dev/null
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
EOF17

 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- OVPN Download site by iamBARTX -->

<head><meta charset="utf-8" /><title>MyScriptName OVPN Config Download</title><meta name="description" content="MyScriptName Server" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"><link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head><body><div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;"><div class="col-md"><div class="view"><img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div></div><div class="card"><div class="card-body"><h5 class="card-title">Config List</h5><br /><ul class="list-group"><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Globe/TM <span class="badge light-blue darken-4">Android/iOS</span><br /><small> For EZ/GS Promo with WNP,SNS,FB and IG freebies</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GTMConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For TU Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/SunConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Modem</span><br /><small> TU Promo TCP</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GStories.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li></ul></div></div></div></div></body></html>
mySiteOvpn
 
 # Setting template's correct name,IP address and nginx Port
 sed -i "s|MyScriptName|$MyScriptName|g" /var/www/openvpn/index.html
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r octopusvpn-configs.zip *.ovpn
 cd
}

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo -e "0 3\t* * *\troot\treboot" > /etc/cron.d/b_reboot_job

 # Creating directory for startup script
 rm -rf /etc/octopusvpn
 mkdir -p /etc/octopusvpn
 chmod -R 755 /etc/octopusvpn
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/octopusvpn/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null




EOFSH
 chmod +x /etc/octopusvpn/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/octopusvpn/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 echo "[Unit]
Description=Octopus VPN Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/octopusvpn/startup.sh
RemainAfterExit=yes

bash /path/condom.sh

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/octopusvpn.service
 chmod +x /etc/systemd/system/octopusvpn.service
 systemctl daemon-reload
 systemctl start octopusvpn
 systemctl enable octopusvpn &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://raw.githubusercontent.com/itsgelogomayee/dpndncy/master/menu.zip'
unzip -qq menu.zip
rm -f menu.zip
chmod +x ./*
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|/etc/privoxy/config|g' ./*
sed -i 's|http_port|listen-address|g' ./*
cd ~

echo 'clear' > /etc/profile.d/octopusvpn.sh
echo 'echo '' > /var/log/syslog' >> /etc/profile.d/octopusvpn.sh
echo 'screenfetch -p -A Android' >> /etc/profile.d/octopusvpn.sh
chmod +x /etc/profile.d/octopusvpn.sh
}

function ScriptMessage(){
 echo -e " $MyScriptName Debian VPS Installer"
 echo -e " Open release version"
}


#############################
#############################
## Installation Process
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################


 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31m×\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Privoxy and Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN

 
 # Websocket

apt-get install netcat lsof php php-mysqli php-mysql php-gd php-mbstring python -y
cat << \socksopenvpn > /usr/local/sbin/proxy.py
#!/usr/bin/env python3
# encoding: utf-8
# Python By: tknetwork
import socket, threading, thread, select, signal, sys, time, getopt

# CONFIG
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 81

PASS = ''

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:22'
RESPONSE = 'HTTP/1.1 101 Switching Protocols \r\n\r\n'


class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()

    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()

    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()

    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()

            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)

            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')

            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)

            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
	    pass
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        aux = head.find(header + ': ')

        if aux == -1:
            return ''

        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')

        if aux == -1:
            return ''

        return head[:aux];

    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if self.method=='CONNECT':
                port = 443
            else:
                port = 80
                port = 8080
                port = 8799
                port = 3128

        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]

        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path

        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''

        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
		    try:
                        data = in_.recv(BUFLEN)
                        if data:
			    if in_ is self.target:
				self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]

                            count = 0
			else:
			    break
		    except:
                        error = True
                        break
            if count == TIMEOUT:
                error = True

            if error:
                break


def print_usage():
    print 'Usage: proxy.py -p <port>'
    print '       proxy.py -b <bindAddr> -p <port>'
    print '       proxy.py -b 0.0.0.0 -p 80'

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT

    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)


def main(host=LISTENING_ADDR, port=LISTENING_PORT):

    print "\n:-------PythonProxy-------:\n"
    print "Listening addr: " + LISTENING_ADDR
    print "Listening port: " + str(LISTENING_PORT) + "\n"
    print ":-------------------------:\n"

    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()

    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print 'Stopping...'
            server.close()
            break

if __name__ == '__main__':
    parse_args(sys.argv[1:])
    main()

socksopenvpn


cat << \autostart > /root/auto
#!/bin/bash
if nc -z localhost 80; then
    echo "SocksProxy running"
else
    echo "Starting Port 80"
    screen -dmS proxy2 python /usr/local/sbin/proxy.py 80
fi

autostart

chmod +x /root/auto
/root/auto;
crontab -r
echo "SHELL=/bin/bash
* * * * * /bin/bash /root/auto >/dev/null 2>&1" | crontab -


 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~

 # Running sysinfo 
 bash /etc/profile.d/octopusvpn.sh
 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
 echo -e ""
 echo -e " Success Installation"
 echo -e ""
 echo -e " Service Ports: "
 echo -e " OpenSSH: $SSH_Port1, $SSH_Port2"
 echo -e " Stunnel: $Stunnel_Port1, $Stunnel_Port2, $Stunnel_Port3"
 echo -e " DropbearSSH: $Dropbear_Port1, $Dropbear_Port2"
 echo -e " Privoxy: $Privoxy_Port1, $Privoxy_Port2"
 echo -e " Squid: $Proxy_Port1, $Proxy_Port2"
 echo -e " OpenVPN: $OpenVPN_Port1, $OpenVPN_Port2"
 echo -e " NGiNX: $OvpnDownload_Port"
 echo -e " Webmin: 10000"
 echo -e ""
 echo -e ""
 echo -e " OpenVPN Configs Download site"
 echo -e " http://$IPADDR:$OvpnDownload_Port"
 echo -e ""
 echo -e " All OpenVPN Configs Archive"
 echo -e " http://$IPADDR:$OvpnDownload_Port/octopusvpn-configs.zip"
 echo -e ""
 echo -e ""
 echo -e " [Note] DO NOT RESELL THIS SCRIPT"

 # Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog

rm -f p22*
exit 1
